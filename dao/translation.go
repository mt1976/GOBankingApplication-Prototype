package dao

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/google/uuid"
	core "github.com/mt1976/mwt-go-dev/core"
	dm "github.com/mt1976/mwt-go-dev/datamodel"
)

// Defines the Fields to Fetch from SQL
var appTranslationStoreSQL = "id, 	class, 	message, 	translation, 	_created, 	_who, 	_host, 	_updated"

var sqlTranslationStoreId, sqlTranslationStoreClass, sqlTranslationStoreMessage, sqlTranslationStoreTranslation, sqlTranslationStoreSYSCreated, sqlTranslationStoreSYSWho, sqlTranslationStoreSYSHost, sqlTranslationStoreSYSUpdated sql.NullString

var appTranslationStoreNoParams = strings.Count(appTranslationStoreSQL, ",") + 1
var appTranslationStoreParams = strings.Repeat("'%s',", appTranslationStoreNoParams)
var appTranslationStoreSQLINSERT = "INSERT INTO %s.translationStore(%s) VALUES(" + strings.TrimRight(appTranslationStoreParams, ",") + ");"
var appTranslationStoreSQLDELETE = "DELETE FROM %s.translationStore WHERE id='%s';"
var appTranslationStoreSQLSELECT = "SELECT %s FROM %s.translationStore;"
var appTranslationStoreSQLGET = "SELECT %s FROM %s.translationStore WHERE id='%s';"

//Translation_GetList searchs for returns a list of translations
func Translation_GetList(unused *sql.DB) (int, []dm.Translation, error) {
	tsql := fmt.Sprintf(appTranslationStoreSQLSELECT, appTranslationStoreSQL, core.ApplicationPropertiesDB["schema"])
	count, appTranslationStoreList, _, _ := translation_Query(core.ApplicationDB, tsql)
	return count, appTranslationStoreList, nil
}

//Translation_GetItemByID searchs for and returns a translation
func Translation_GetItemByID(id string) (int, dm.Translation, error) {
	tsql := fmt.Sprintf(appTranslationStoreSQLGET, appTranslationStoreSQL, core.ApplicationPropertiesDB["schema"], id)
	_, _, returnItem, _ := translation_Query(core.ApplicationDB, tsql)
	return 1, returnItem, nil
}

//Translation_Store stores a translation
func Translation_Store(r dm.Translation, req *http.Request) {
	//fmt.Println(credentialStore)
	userID := core.GetUserName(req)
	Translation_StoreUser(r, userID)
}

//Translation_StoreSystem stores a translation with generic system
func Translation_StoreSystem(r dm.Translation) {
	//fmt.Println(credentialStore)
	Translation_StoreUser(r, "AutoGenerated")
}

//Translation_StoreUser stores a translation with standard user details
func Translation_StoreUser(r dm.Translation, userID string) {
	//fmt.Println(credentialStore)

	createDate := time.Now().Format(core.DATETIMEFORMATUSER)

	//	currentUserID, _ := user.Current()
	//	userID := currentUserID.Name
	host, _ := os.Hostname()

	if len(r.SYSCreated) == 0 {
		r.SYSCreated = createDate
		r.SYSWho = userID
		r.SYSHost = host
		// Default in info for a new RECORD
	}

	r.SYSUpdated = createDate

	//fmt.Println("RECORD", r)
	//fmt.Printf("%s\n", sqlstruct.Columns(DataStoreSQL{}))

	deletesql := fmt.Sprintf(appTranslationStoreSQLDELETE, core.ApplicationPropertiesDB["schema"], r.Id)
	inserttsql := fmt.Sprintf(appTranslationStoreSQLINSERT, core.ApplicationPropertiesDB["schema"], appTranslationStoreSQL, r.Id, r.Class, r.Message, r.Translation, r.SYSCreated, r.SYSWho, r.SYSHost, r.SYSUpdated)

	//log.Println("DELETE:", deletesql, core.ApplicationDB)
	//log.Println("INSERT:", inserttsql, core.ApplicationDB)

	_, err2 := core.ApplicationDB.Exec(deletesql)
	if err2 != nil {
		log.Panicf("%e", err2)
	}
	_, err := core.ApplicationDB.Exec(inserttsql)
	if err != nil {
		log.Panicf("%e", err)
	}
}

//Translation_DeleteByID deletes a translation store record
func Translation_DeleteByID(id string) {
	//fmt.Println(credentialStore)
	deletesql := fmt.Sprintf(appTranslationStoreSQLDELETE, core.ApplicationPropertiesDB["schema"], id)
	//log.Println("DELETE:", deletesql)
	_, err2 := core.ApplicationDB.Exec(deletesql)
	if err2 != nil {
		log.Println(err2.Error())
	}
	//log.Println(fred2, err2)
}

// translation_Query queries the database
func translation_Query(unused *sql.DB, tsql string) (int, []dm.Translation, dm.Translation, error) {
	//log.Println(tsql)
	var appTranslationStore dm.Translation
	var appTranslationStoreList []dm.Translation

	rows, err := core.ApplicationDB.Query(tsql)
	//fmt.Println("back from dq Q")
	if err != nil {
		log.Println("Error reading rows: " + err.Error())
		return -1, nil, appTranslationStore, err
	}
	//fmt.Println(rows)
	defer rows.Close()
	count := 0
	for rows.Next() {
		err := rows.Scan(&sqlTranslationStoreId, &sqlTranslationStoreClass, &sqlTranslationStoreMessage, &sqlTranslationStoreTranslation, &sqlTranslationStoreSYSCreated, &sqlTranslationStoreSYSWho, &sqlTranslationStoreSYSHost, &sqlTranslationStoreSYSUpdated)
		if err != nil {
			log.Println("Error reading rows: " + err.Error())
			return -1, nil, appTranslationStore, err
		}
		// Mapping from SQL to Struct
		appTranslationStore.Id = sqlTranslationStoreId.String
		appTranslationStore.Class = sqlTranslationStoreClass.String
		appTranslationStore.Message = sqlTranslationStoreMessage.String
		appTranslationStore.Translation = sqlTranslationStoreTranslation.String
		appTranslationStore.SYSCreated = sqlTranslationStoreSYSCreated.String
		appTranslationStore.SYSWho = sqlTranslationStoreSYSWho.String
		appTranslationStore.SYSHost = sqlTranslationStoreSYSHost.String
		appTranslationStore.SYSUpdated = sqlTranslationStoreSYSUpdated.String
		// no change below
		appTranslationStoreList = append(appTranslationStoreList, appTranslationStore)
		//log.Printf("Code: %s, Name: %s, Shortcode: %s, eu_eea: %t\n", code, name, shortcode, eu_eea)
		count++
	}
	//log.Println(count, appTranslationStoreList, appTranslationStore)
	return count, appTranslationStoreList, appTranslationStore, nil
}

func translation_newID() string {
	id := uuid.New().String()
	return id
}

// Returns a valid translation store ID
func Translation_GetID(class string, message string) string {
	var translationStoreID string
	message = strings.ReplaceAll(message, " ", "-")
	message = core.RemoveSpecialChars(message)
	translationStoreID = class + core.IDSep + message
	return translationStoreID
}
