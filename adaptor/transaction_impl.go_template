package adaptor

import (
	"strings"

	core "github.com/mt1976/mwt-go-dev/core"
	logs "github.com/mt1976/mwt-go-dev/logs"
    dm "github.com/mt1976/mwt-go-dev/datamodel"
)
// ----------------------------------------------------------------
// Automatically generated  "/adaptor/transaction.go"
// ----------------------------------------------------------------
// Package              : adaptor
// Object 			    : Transaction (transaction)
// Endpoint 	        : Transaction (Ref)
// For Project          : github.com/mt1976/mwt-go-dev/
// ----------------------------------------------------------------
// Template Generator   : delinquentDysprosium [r4-21.12.31]
// Date & Time		    : 26/06/2022 at 18:48:11
// Who & Where		    : matttownsend (Matt Townsend) on silicon.local
// ----------------------------------------------------------------

// The following functions should be created in transaction_impl.go



func Transaction_NewID_impl(rec dm.Transaction) (string) { return rec.SienaReference }
func Transaction_Delete_impl(id string) (error) {return nil}


func Transaction_Update_impl(id string,rec dm.Transaction, usr string) (error) {return nil}

	// If there are fields below, create the methods in adaptor\transaction_impl.go
	// START - GET API/Callout
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	//
func Transaction_Dealt_OnStore_impl (fieldval string,rec dm.Transaction,usr string) (string,error)  {
	logs.Callout("Transaction", "Dealt", PUT, rec.SienaReference)
	return fieldval,nil
	}
func Transaction_Against_OnStore_impl (fieldval string,rec dm.Transaction,usr string) (string,error)  {
	logs.Callout("Transaction", "Against", PUT, rec.SienaReference)
	return fieldval,nil
	}

	// 
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	// END - GET API/Callout
	//
	// START - PUT API/Callout
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	//
func Transaction_Dealt_OnFetch_impl (rec dm.Transaction)(string) {
	logs.Callout("Transaction", "Dealt", GET, rec.SienaReference)
	return ""
	}
func Transaction_Against_OnFetch_impl (rec dm.Transaction)(string) {
	logs.Callout("Transaction", "Against", GET, rec.SienaReference)
	return ""
	}

	// 
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	// END - PUT API/Callout

	// START - Validation API/Callout
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	//
	// Transaction_Dealt_Impl provides validation/actions for Dealt
	func Transaction_Dealt_Impl (iAction string, iId string, iValue string, iRec dm.Transaction, fP dm.FieldProperties) (string, dm.FieldProperties) {
	logs.Callout("Transaction", "Dealt", VAL +"-"+iAction, iId)
	return "",fP
	}
	// Transaction_Against_Impl provides validation/actions for Against
	func Transaction_Against_Impl (iAction string, iId string, iValue string, iRec dm.Transaction, fP dm.FieldProperties) (string, dm.FieldProperties) {
	logs.Callout("Transaction", "Against", VAL +"-"+iAction, iId)
	return "",fP
	}

	// 
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	// END - Validation API/Callout