package adaptor

import (
	"strings"

	core "github.com/mt1976/mwt-go-dev/core"
	logs "github.com/mt1976/mwt-go-dev/logs"
    dm "github.com/mt1976/mwt-go-dev/datamodel"
)
// ----------------------------------------------------------------
// Automatically generated  "/adaptor/account.go"
// ----------------------------------------------------------------
// Package              : adaptor
// Object 			    : Account (account)
// Endpoint 	        : Account (AccountNo)
// For Project          : github.com/mt1976/mwt-go-dev/
// ----------------------------------------------------------------
// Template Generator   : delinquentDysprosium [r4-21.12.31]
// Date & Time		    : 26/06/2022 at 18:48:16
// Who & Where		    : matttownsend (Matt Townsend) on silicon.local
// ----------------------------------------------------------------

// The following functions should be created in account_impl.go



func Account_NewID_impl(rec dm.Account) (string) { return rec.SienaReference }
func Account_Delete_impl(id string) (error) {return nil}


func Account_Update_impl(id string,rec dm.Account, usr string) (error) {return nil}

	// If there are fields below, create the methods in adaptor\account_impl.go
	// START - GET API/Callout
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	//
func Account_DealtCA_OnStore_impl (fieldval string,rec dm.Account,usr string) (string,error)  {
	logs.Callout("Account", "DealtCA", PUT, rec.SienaReference)
	return fieldval,nil
	}
func Account_AgainstCA_OnStore_impl (fieldval string,rec dm.Account,usr string) (string,error)  {
	logs.Callout("Account", "AgainstCA", PUT, rec.SienaReference)
	return fieldval,nil
	}
func Account_LedgerCA_OnStore_impl (fieldval string,rec dm.Account,usr string) (string,error)  {
	logs.Callout("Account", "LedgerCA", PUT, rec.SienaReference)
	return fieldval,nil
	}
func Account_CashBalanceCA_OnStore_impl (fieldval string,rec dm.Account,usr string) (string,error)  {
	logs.Callout("Account", "CashBalanceCA", PUT, rec.SienaReference)
	return fieldval,nil
	}

	// 
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	// END - GET API/Callout
	//
	// START - PUT API/Callout
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	//
func Account_DealtCA_OnFetch_impl (rec dm.Account)(string) {
	logs.Callout("Account", "DealtCA", GET, rec.SienaReference)
	return ""
	}
func Account_AgainstCA_OnFetch_impl (rec dm.Account)(string) {
	logs.Callout("Account", "AgainstCA", GET, rec.SienaReference)
	return ""
	}
func Account_LedgerCA_OnFetch_impl (rec dm.Account)(string) {
	logs.Callout("Account", "LedgerCA", GET, rec.SienaReference)
	return ""
	}
func Account_CashBalanceCA_OnFetch_impl (rec dm.Account)(string) {
	logs.Callout("Account", "CashBalanceCA", GET, rec.SienaReference)
	return ""
	}

	// 
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	// END - PUT API/Callout

	// START - Validation API/Callout
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	//
	// Account_DealtCA_Impl provides validation/actions for DealtCA
	func Account_DealtCA_Impl (iAction string, iId string, iValue string, iRec dm.Account, fP dm.FieldProperties) (string, dm.FieldProperties) {
	logs.Callout("Account", "DealtCA", VAL +"-"+iAction, iId)
	return "",fP
	}
	// Account_AgainstCA_Impl provides validation/actions for AgainstCA
	func Account_AgainstCA_Impl (iAction string, iId string, iValue string, iRec dm.Account, fP dm.FieldProperties) (string, dm.FieldProperties) {
	logs.Callout("Account", "AgainstCA", VAL +"-"+iAction, iId)
	return "",fP
	}
	// Account_LedgerCA_Impl provides validation/actions for LedgerCA
	func Account_LedgerCA_Impl (iAction string, iId string, iValue string, iRec dm.Account, fP dm.FieldProperties) (string, dm.FieldProperties) {
	logs.Callout("Account", "LedgerCA", VAL +"-"+iAction, iId)
	return "",fP
	}
	// Account_CashBalanceCA_Impl provides validation/actions for CashBalanceCA
	func Account_CashBalanceCA_Impl (iAction string, iId string, iValue string, iRec dm.Account, fP dm.FieldProperties) (string, dm.FieldProperties) {
	logs.Callout("Account", "CashBalanceCA", VAL +"-"+iAction, iId)
	return "",fP
	}

	// 
	// Dynamically generated 26/06/2022 by matttownsend (Matt Townsend) on silicon.local 
	// END - Validation API/Callout